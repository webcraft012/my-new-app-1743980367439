This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where line numbers have been added.

<directory_structure>
app/
  server-components/
    todos/
      TodoList.tsx
  layout.tsx
  page.tsx
backend/
  todos/
    actions.ts
components/
  todos/
    TodoInput.tsx
    TodoItem.tsx
  ui/
    button.tsx
    checkbox.tsx
    input.tsx
  Layout.tsx
lib/
  store/
    todo-store.ts
  types/
    todos.ts
  utils.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/server-components/todos/TodoList.tsx">
 1: import {
 2:   getTodos,
 3:   addTodo,
 4:   toggleTodo,
 5:   removeTodo,
 6: } from "@/backend/todos/actions";
 7: import { TodoItem } from "@/components/todos/TodoItem";
 8: import { TodoInput } from "@/components/todos/TodoInput";
 9: 
10: /**
11:  * Server component for displaying the todo list
12:  */
13: export default async function TodoList() {
14:   const todos = await getTodos();
15: 
16:   return (
17:     <div className="max-w-md mx-auto space-y-4 p-4">
18:       <TodoInput onAdd={addTodo} />
19:       <div className="space-y-2">
20:         {todos.map((todo) => (
21:           <TodoItem
22:             key={todo.id}
23:             todo={todo}
24:             onToggle={toggleTodo}
25:             onRemove={removeTodo}
26:           />
27:         ))}
28:       </div>
29:     </div>
30:   );
31: }
</file>

<file path="app/layout.tsx">
 1: import "../styles/globals.css";
 2: import type { Metadata } from "next";
 3: import { Inter } from "next/font/google";
 4: 
 5: const inter = Inter({
 6:   subsets: ["latin"],
 7:   variable: "--font-sans",
 8: });
 9: 
10: export const metadata: Metadata = {
11:   title: "Todo App",
12:   description: "A simple todo app built with Next.js",
13: };
14: 
15: export default function RootLayout({
16:   children,
17: }: {
18:   children: React.ReactNode;
19: }) {
20:   return (
21:     <html lang="en" className={inter.variable}>
22:       <body className="min-h-screen bg-background font-sans antialiased">
23:         {children}
24:       </body>
25:     </html>
26:   );
27: }
</file>

<file path="app/page.tsx">
 1: import TodoList from "./server-components/todos/TodoList";
 2: 
 3: /**
 4:  * Main page component as an async server component.
 5:  */
 6: export default async function Home() {
 7:   const todoListContent = await TodoList();
 8: 
 9:   return (
10:     <main className="min-h-screen bg-gray-50 py-8">
11:       <div className="container mx-auto">
12:         <h1 className="text-3xl font-bold text-center mb-8">Todo App</h1>
13:         {todoListContent}
14:       </div>
15:     </main>
16:   );
17: }
</file>

<file path="backend/todos/actions.ts">
 1: "use server";
 2: 
 3: import { revalidatePath } from "next/cache";
 4: 
 5: /**
 6:  * Simple in-memory storage for todos
 7:  * In a real app, this would be a database
 8:  */
 9: let todos: { id: string; text: string; completed: boolean }[] = [];
10: 
11: /**
12:  * Adds a new todo
13:  */
14: export async function addTodo(text: string) {
15:   todos.push({
16:     id: crypto.randomUUID(),
17:     text,
18:     completed: false,
19:   });
20:   revalidatePath("/");
21:   return todos;
22: }
23: 
24: /**
25:  * Toggles a todo's completion status
26:  */
27: export async function toggleTodo(id: string) {
28:   todos = todos.map((todo) =>
29:     todo.id === id ? { ...todo, completed: !todo.completed } : todo
30:   );
31:   revalidatePath("/");
32:   return todos;
33: }
34: 
35: /**
36:  * Removes a todo
37:  */
38: export async function removeTodo(id: string) {
39:   todos = todos.filter((todo) => todo.id !== id);
40:   revalidatePath("/");
41:   return todos;
42: }
43: 
44: /**
45:  * Gets all todos
46:  */
47: export async function getTodos() {
48:   return todos;
49: }
</file>

<file path="components/todos/TodoInput.tsx">
 1: "use client";
 2: 
 3: import { useState } from "react";
 4: import { Button } from "@/components/ui/button";
 5: import { Input } from "@/components/ui/input";
 6: 
 7: /**
 8:  * Props for TodoInput component
 9:  */
10: interface TodoInputProps {
11:   onAdd: (text: string) => void;
12: }
13: 
14: /**
15:  * Client component for adding new todos
16:  */
17: export function TodoInput({ onAdd }: TodoInputProps) {
18:   const [text, setText] = useState("");
19: 
20:   const handleSubmit = (e: React.FormEvent) => {
21:     e.preventDefault();
22:     if (text.trim()) {
23:       onAdd(text);
24:       setText("");
25:     }
26:   };
27: 
28:   return (
29:     <form onSubmit={handleSubmit} className="flex gap-2">
30:       <Input
31:         type="text"
32:         value={text}
33:         onChange={(e) => setText(e.target.value)}
34:         placeholder="Add a new todo..."
35:         className="flex-1"
36:       />
37:       <Button type="submit">Add</Button>
38:     </form>
39:   );
40: }
</file>

<file path="components/todos/TodoItem.tsx">
 1: "use client";
 2: 
 3: import { Button } from "@/components/ui/button";
 4: import { Checkbox } from "@/components/ui/checkbox";
 5: import type { Todo } from "@/lib/types/todos";
 6: 
 7: /**
 8:  * Props for TodoItem component
 9:  */
10: interface TodoItemProps {
11:   todo: Todo;
12:   onToggle: (id: string) => void;
13:   onRemove: (id: string) => void;
14: }
15: 
16: /**
17:  * Client component for displaying a single todo item
18:  */
19: export function TodoItem({ todo, onToggle, onRemove }: TodoItemProps) {
20:   return (
21:     <div className="flex items-center gap-2 p-2 border rounded">
22:       <Checkbox
23:         checked={todo.completed}
24:         onCheckedChange={() => onToggle(todo.id)}
25:         id={todo.id}
26:       />
27:       <label
28:         htmlFor={todo.id}
29:         className={`flex-1 ${
30:           todo.completed ? "line-through text-gray-500" : ""
31:         }`}
32:       >
33:         {todo.text}
34:       </label>
35:       <Button
36:         variant="outline"
37:         onClick={() => onRemove(todo.id)}
38:         className="text-red-500 hover:text-red-700 hover:bg-red-50 px-2 py-1 text-sm"
39:       >
40:         Delete
41:       </Button>
42:     </div>
43:   );
44: }
</file>

<file path="components/ui/button.tsx">
 1: import * as React from "react";
 2: import { cn } from "@/lib/utils";
 3: 
 4: /**
 5:  * Button component props
 6:  *
 7:  * @interface ButtonProps
 8:  * @extends {React.ButtonHTMLAttributes<HTMLButtonElement>}
 9:  */
10: export interface ButtonProps
11:   extends React.ButtonHTMLAttributes<HTMLButtonElement> {
12:   /**
13:    * The variant style of the button
14:    */
15:   variant?: "default" | "outline" | "ghost";
16: }
17: 
18: /**
19:  * Button component
20:  *
21:  * A reusable button component with different style variants
22:  *
23:  * @param {ButtonProps} props - Component properties
24:  * @returns {JSX.Element} The button component
25:  */
26: const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
27:   ({ className, variant = "default", ...props }, ref) => {
28:     // Different styling based on variant
29:     const variantStyles = {
30:       default: "bg-primary text-primary-foreground hover:bg-primary/90",
31:       outline:
32:         "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
33:       ghost: "hover:bg-accent hover:text-accent-foreground",
34:     };
35: 
36:     return (
37:       <button
38:         className={cn(
39:           "inline-flex items-center justify-center rounded-md px-4 py-2 text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
40:           variantStyles[variant],
41:           className
42:         )}
43:         ref={ref}
44:         {...props}
45:       />
46:     );
47:   }
48: );
49: 
50: Button.displayName = "Button";
51: 
52: export { Button };
</file>

<file path="components/ui/checkbox.tsx">
 1: import * as React from "react"
 2: import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
 3: import { Check } from "lucide-react"
 4: 
 5: import { cn } from "@/lib/utils"
 6: 
 7: const Checkbox = React.forwardRef<
 8:   React.ElementRef<typeof CheckboxPrimitive.Root>,
 9:   React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
10: >(({ className, ...props }, ref) => (
11:   <CheckboxPrimitive.Root
12:     ref={ref}
13:     className={cn(
14:       "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
15:       className
16:     )}
17:     {...props}
18:   >
19:     <CheckboxPrimitive.Indicator
20:       className={cn("flex items-center justify-center text-current")}
21:     >
22:       <Check className="h-4 w-4" />
23:     </CheckboxPrimitive.Indicator>
24:   </CheckboxPrimitive.Root>
25: ))
26: Checkbox.displayName = CheckboxPrimitive.Root.displayName
27: 
28: export { Checkbox }
</file>

<file path="components/ui/input.tsx">
 1: import * as React from "react"
 2: 
 3: import { cn } from "@/lib/utils"
 4: 
 5: const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
 6:   ({ className, type, ...props }, ref) => {
 7:     return (
 8:       <input
 9:         type={type}
10:         className={cn(
11:           "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
12:           className
13:         )}
14:         ref={ref}
15:         {...props}
16:       />
17:     )
18:   }
19: )
20: Input.displayName = "Input"
21: 
22: export { Input }
</file>

<file path="components/Layout.tsx">
 1: import React from "react";
 2: 
 3: /**
 4:  * Props for the Layout component
 5:  *
 6:  * @interface LayoutProps
 7:  * @property {React.ReactNode} children - The content to render inside the layout
 8:  * @property {string} [title] - The page title
 9:  * @property {string} [description] - The page meta description
10:  */
11: interface LayoutProps {
12:   children: React.ReactNode;
13:   title?: string;
14:   description?: string;
15: }
16: 
17: /**
18:  * Layout component that wraps all pages
19:  *
20:  * Provides consistent page structure with head metadata
21:  *
22:  * @param {LayoutProps} props - Component props
23:  * @returns {JSX.Element} The layout component
24:  */
25: export function Layout({ children }: LayoutProps): JSX.Element {
26:   return <div className="min-h-screen font-sans">{children}</div>;
27: }
</file>

<file path="lib/store/todo-store.ts">
 1: import { create } from "zustand";
 2: import { Todo } from "@/lib/types/todos";
 3: 
 4: /**
 5:  * Interface for the todo store state and actions
 6:  */
 7: interface TodoStore {
 8:   todos: Todo[];
 9:   addTodo: (text: string) => void;
10:   toggleTodo: (id: string) => void;
11:   removeTodo: (id: string) => void;
12: }
13: 
14: /**
15:  * Zustand store for managing todos
16:  */
17: export const useTodoStore = create<TodoStore>((set) => ({
18:   todos: [],
19:   addTodo: (text) =>
20:     set((state) => ({
21:       todos: [
22:         ...state.todos,
23:         { id: crypto.randomUUID(), text, completed: false },
24:       ],
25:     })),
26:   toggleTodo: (id) =>
27:     set((state) => ({
28:       todos: state.todos.map((todo) =>
29:         todo.id === id ? { ...todo, completed: !todo.completed } : todo
30:       ),
31:     })),
32:   removeTodo: (id) =>
33:     set((state) => ({
34:       todos: state.todos.filter((todo) => todo.id !== id),
35:     })),
36: }));
</file>

<file path="lib/types/todos.ts">
1: /**
2:  * Interface representing a todo item
3:  */
4: export interface Todo {
5:   id: string;
6:   text: string;
7:   completed: boolean;
8: }
</file>

<file path="lib/utils.ts">
1: import { clsx, type ClassValue } from "clsx"
2: import { twMerge } from "tailwind-merge"
3: 
4: export function cn(...inputs: ClassValue[]) {
5:   return twMerge(clsx(inputs))
6: }
</file>

</files>
